Pragmaticus — опытный в деле, пригодный для использования
Большинство людей находят перемены трудными – иногда по веским основаниям, а иногда просто по укоренившейся инерции. Поэтому в разделе "Суп из камней и варёные лягушки" рассматривается стратегия побуждающих к действию перемен и (ради равновесия) представлена поучительная история об одном земноводном, пренебрегшем опасностями, скрывающимися в постепенных переменах.
Одно из преимуществ, дающих понимание контекста, в котором вы работаете, заключается в том, что вам просто легче выяснить, насколько качественно разработанное вами программное обеспечение. Иногда близкое к идеальному качество оказывается лишь одним из возможных вариантов, но зачастую приходится идти на компромиссы. Более подробно этот вопрос рассматривается в разделе "Подходящее программное обеспечение".
Безусловно, чтобы всё это осилить, потребуется обширная база знаний, поэтому обучение – это непрерывно продолжающийся процесс. В связи с этим в разделе "Ваш багаж знаний" описываются некоторые стратегии поддержания динамики данного процесса.
Наконец, никто из нас не работает в вакууме. Все мы проводим немало времени, общаясь с другими людьми. Поэтому в разделе "Общайтесь!" перечислены способы, помогающие делать это лучше.
Прагматичное программирование происходит от философии прагматичного мышления. И в этой главе закладывается основание для такой философии.
Это ваша жизнь
"Я в этом мире не для того, чтобы жить то вашим ожиданиям, а вы – не для того, чтобы жить по моим".
								Брюс Ли
Это ваша жизнь, и она принадлежит вам. Вы её ведёте и творите.
Многие разработчики жалуются нам на свою разочарованность. Их проблемы различны. Одни ощущают застой в своей работе, а другие считают, что технический прогресс обошёл их стороной. Они полагают, что их недооценивают, им недоплачивают или в их командах отравляющая атмосфера. Возможно, они хотят переехать в Азию или в Европу, а может быть
работать дома. И в ответ на все эти жалобы мы всегда задаём один и тот же вопрос:"Почему вы не можете это изменить?"
Разработка программного обеспечения должна находится близко к началу любого доступного списка требующихся специальностей. Навыки разработчиков востребованы, их знания распространяются за пределы географических границ, они работают в удалённом режиме, получая за свой труд хорошую плату.
И вообще, они могут делать почти всё, что хотят.
Но по какой-то причине разработчики противятся переменам. Они выжидают, надеясь, что положение дел переменится к лучшему. Они пассивно наблюдают за тем, как их навыки устаревают, жалуясь на то, что их компании ничему их не обучают. Они рассматривают рекламные объявления экзотических стран в городском транспорте, а затем выходят под холодный дождь и бредут на работу. Поэтому ниже приведён самый важный совет в этой книге.
У вас есть свобода выбора. (Ахахахах, из ограниченного числа вариантов.)
Кот съел мой код
Одним из краеугольных камней прагматизма философии является идея взять на себя ответственность за свои действия в отношении продвижения по карьерной лестнице, обучения и образования, выполнения своего проекта и повседневной работы. Программисты-прагматики сами заботятся о своей карьере и не боятся признавать своё невежество или ошибки. Это, конечно, не самая приятная сторона программирования, но она всё же проявляется даже в самых удачных проектах. Порой дело не ладится, несмотря на проведённое тестирование, грамотно составленную документацию и сплошную авторматизацию.  И тогда выпуск программного продукта задерживается в связи с возникшими непредвиденными техническими трудностями. 
Если происходит нечто подобное, мы стараемся обращаться с командой как можно более профессионально. А это означает быть честными и откровенными. Мы можем гордиться своими способностями, но должны признавать и свои недостатки: невежество и ошибки.
Доверие в команде
Прежде всего, ваша команда должна доверять вам и полагаться на вас, а вы – вы спокойно полагаться на каждого из ее членов. Доверие в команде совершенно необходимо для проявления творческой инициативы и сотрудничества, как следует из литературы, в которой исследуется данный вопрос. В здоровом окружении, основанном на доверии, вы можете смело высказывать свои мысли, представлять свои идеи на суд коллег и полагаться на других членов команды так же, как и они на вас. Ведь без доверия…
Представьте, что высокотехнологичная команда ниндзя незаметно проникает в самое логово преступников. После нескольких месяцев тщательного планирования и изнуряющих тренировок вы, наконец-то добрались до места. И теперь, когда настал ваш черёд настроить систему лазерного наведения, вы неожиданно для остальных заявляете:" Извините, ребята, у меня нет с собой лазера. Мой кот играл с красной точкой лазерного целеуказателя, и поэтому я оставил его дома". Нарушенное подобным образом доверие вряд ли удастся восстановить.
Взятие на себя ответственности
Ответственность – это нечто такое, на что вы активно соглашаетесь. В частности, вы берёте на себя обязательство обеспечить правильность выполнения какой-либо работы, но совсем не обязательно имеете непосредственный контроль над каждой стадией данного процесса. Помимо того, что вы стараетесь выполнить свою работу как можно лучше, вам приходится также анализировать ситуацию на наличие неподконтрольных вам рисков. Вы имеете полное право не брать на себя ответственность за непредсказуемую ситуацию или такую, когда риски слишком велики или этические последствия слишком постыдны. И тогда вам придётся принимать решение, исходя из ваших собственных ценностей и суждений.
Если вы все же берёте на себя ответственность за конечный результат, то должны учитывать, что вам придётся нести ответственность за него. И если вы допустите оплошность, как это делаем все мы, или совершите ошибку в суждении, то признайте её честно и постарайтесь предложить другие варианты выхода из затруднительной ситуации.
Не сваливайте вину на кого-то или что-то другое и не ищите оправданий. Не вините во всём трудности у поставщика, язык программирования, руководство или коллег. Любой из этих факторов может сыграть свою отрицательную роль, но именно вы должны найти правильные решения, а не оправдания.
На случай, если существует риск, что поставщик вас подведёт, у вас должен быть план экстренных мероприятий. Если же выйдет из строя устройство памяти, а вместе с ним исчезнет весь исходный код и у вас не окажется его резервной копии, – это будет вашей оплошностью. Оправдание перед начальством вроде "кот съел мой исходный код" просто не пройдёт.
Предлагайте варианты разрешения затруднений, а не оправдания и извинения.
Прежде чем подходить к кому-нибудь и объяснять причины, по которым что-то нельзя сделать, что-то запаздывает или не работает, остановитесь и послушайте себя. Обратитесь к резиновому утёнку или котёнку на своём мониторе, чтобы опробовать на нём, звучат ли ваши оправдания благоразумно или нелепо и как они будут звучать перед вашим начальством.
Воспроизведите весь разговор в уме и подумайте, что, вероятнее всего, ответит другой его участник. Спросит ли он вас, пробовали ли вы сделать вот это или не учли ли вы вот то? Как вы на это ответите? Прежде чем идти к нему чтобы сообщить плохие новости, подумайте, можно ли опробовать что-нибудь ещё? Иногда вы просто знаете, что он вам ответит, так что избавьте его от лишних хлопот.
Вместо оправданий предлагайте свои варианты разрешения затруднений. Не говорите, что чего-то нельзя сделать. Лучше поясните, что можно сделать, чтобы выйти из трудного положения. Некоторый исходный код должен быть удалён? Скажите об этом и объясните важность этого рефакторинга (см. раздел "Тема 40. Рефакторинг" главы 7 "По ходу кодирования").
Требуется ли вам время на прототипирование, чтобы найти наилучший путь продолжить разработку (см. раздел "Тема 13. Прототипы и памятные записки" главы 2 "Прагматичный подход")? Требуется ли вам внедрить более совершенное тестирование (см. разделы "Тема 41. Тестировать, чтобы кодировать" главы? "По ходу кодирования" и "Строгое и непрерывное тестирование" главы 9 "Прагматичные проекты") или его автоматизация, чтобы не повторять тестирование снова вручную?
Вам могут понадобиться дополнительные ресурсы для окончательного решения задачи тестирования, а возможно, придётся уделить больше времени взаимодействию с пользователями. Или же всё дело просто в вас самих, а значит, вам требуется более углублённо  изучить какие-нибудь книги или курсы? Не бойтесь задаваться подобными вопросами или признаваться в том, что вам нужна помощь.
Старайтесь избавиться от слабых оправданий, прежде чем произносить их вслух. Если вы всё же считаете, что должны оправдаться, сделайте это сначала перед своим котом. И если уж ваш Мурзик готов взять всю вину на себя, то…
Другие разделы, связанные с данной темой
        ◦ Тема 49. Прагматичные команды, глава 9 "Прагматичные проекты".
Задачи
        ◦ Как вы отреагируете, если кто-нибудь (например, банковский служащий, автомеханик или чиновник) придёт к вам со слабым оправданием? Какое у вас составится в итоге мнение о них и об их организации?
        ◦ Если вы, так уж вышло, говорите: "Я не знаю" непременно прибавьте: "Но я найду выход". Это отличный способ признать, что вы чего-то ну знаете, но всё же берете на себя ответственность как профессионал.
Программная энтропия
Несмотря на то что разработка программного обеспечения не подвержена большинству физических законов, все мы сильно подвержены воздействию неуклонного роста энтропии. Физический термин энтропия обозначает величину беспорядка в системе. К сожалению, законы термодинамики утверждают, что энтропия во вселенной стремится к максимуму. Если же беспорядок возрастает в программном обеспечении, но такое явление называется деградацией последнего. Некоторые могли бы назвать это явление более оптимистическим термином "технический долг", подразумевающим, что когда-нибудь они погасят этот долг, – хотя этого, скорее всего, не произойдёт. Но как бы ни называлось данное явление, техническим долгом или деградацией, оно может распространяться бесконтрольно.
Имеется немало факторов, способствующих деградации программного обеспечения, и самый важный из них по видимому имеет отношение к психологии или культуре в работе над проектом. Психология может оказаться весьма тонким свойством вашего проекта, даже если вы работаете над ним самостоятельно. Какими бы совершенными ни были составленные планы или участники проекта, он всё равно может быть подвергнут деградации и разрушению в течение всего срока своего действия. Тем не менее существуют и такие проекты, которые успешно противостоят естественной тенденции к беспорядку и ухитряются завершить вполне удачно, несмотря на огромные трудности и постоянные задержки и помехи.
В чём же тогда отличие? В старых кварталах городов одни здания красивы и чисты, тогда как другие выглядят как трухлявые развалины. Исследователи в сфере преступности и упадка городов открыли замечательный пусковой механизм, очень быстро превращающий чистое, нетронутое, нежилое здание в разрушенную и заброшенную трущобу. Это разбитое окно.
Нельзя жить с разбитыми окнами.
Можно, конечно, возразить, что ни у кого нет времени на обследование проекта и его полную очистку от разбитого стекла. В таком случае лучше запланировать установку мусорного контейнера или переезд в соседнее здание. Но в любом случае не позволяйте энтропии одержать верх.
Прежде всего – не навредить
У Энди некогда был баснословно богатый знакомый. Его дом был в идеальном порядке, обставленный дорогим антиквариатом, предметами искусства и т. д.
Однажды гобелен, висевший слишком близко к камину, загорелся. Пожарные быстро прибыли на место, чтобы потушить пожар и спасти дом от разрушительного огня. Но прежде чем затащить свои длинные и грязные шланги в дом, они остановились, чтобы раскатать мат между входной дверью и очагом пожара, поскольку им не хотелось испортить ковёр – в самый разгар пожара.
Возможно, это и весьма крайний пример. Ведь первая обязанность пожарных – погасить огонь, пренебрегая сопутствующим ущербом. Но они трезво оценили ситуацию, будучи уверенными в своей способности справиться с огнём, и действовали аккуратно, чтобы не нанести имуществу лишний ущерб. Именно таким образом следует обращаться и с программным обеспечением, не нанося ему сопутствующий ущерб лишь потому, что оно находится в каком-то критическом состоянии. Ведь и одно разбитое окно – это уже слишком.
Одного разбитого окна (т. е. плохо написанного фрагмента кода, неудачного управленческого решения, с которым команде приходится мириться в течение всего проекта) достаточно , чтобы всё начало приходить в упадок. Если окажется, что вы работаете над проектом с большим количеством разбитых окон, вам очень легко может прийти в голову следующая мысль "Вся остальная часть этого кода написана скверно, и я поступаю точно так  же". И совсем не важно, что до этого момента проект находился в отличном состоянии. В первоначальном эксперименте, на основании которого была выдвинута теория "разбитого окна", заброшенный автомобиль стоял целую неделю. Но однажды в нём было разбито одно окно, после чего автомобиль был обчищен и перевёрнут вверх дном в считанные часы.
Подобным же образом, присоединившись к проекту, где код безупречен (т. е. написав ясно, изящно и грамотно) , вам следует действовать крайне осторожно, чтобы не навредить, как пожарные в упомянутом выше примере. Даже если пожар в самом разгаре (поджимают сроки, приближается дата выпуска, выставочная демонстрация и т. д.), вы не должны стать первым, кто испортит всё дело или нанесёт дополнительный ущерб. Просто скажите себе:"Никаких разбитых окон".
Другие разделы, связанные с данной темой
    • Помогите укреплению команды, обследовав окрестности проекта. Выберите два или три "разбитых окна" и обсудите со своими коллегами возникшие трудности и возможные пути их разрешения.
    • Можете ли вы предсказать, когда разобьётся первое окно? Какова будет ваша реакция? Если это стало следствием чужого решения или приказа начальства, то что вы можете с этим поделать?
Суп из камней или вареные лягушки
Три солдата, возвращавшихся с войны домой, проголодались. Когда они увидели перед собой село, то воспряли духом, поскольку были уверены, что селяне накормят их. Но когда они добрались до села, то обнаружили двери домов запертыми на замок, а окна закрытыми. После многих лет войны селянам не хватало еды, а ту что у них была, они припрятывали.
Невзирая на постигшую их неудачу, солдаты вскипятили котелок воды, аккуратно положили в него три камня. Поражённые селяне вышли посмотреть на происходящее.
"Это суп из камней", – пояснили солдаты. – " И это всё, что вы в него положили?" – спросили селяне. "Абсолютно всё, хотя говорят, что он будет лучше на вкус, если положить в него немного моркови…" Один из селян удалился, тотчас вернувшись с корзиной моркови из своих припрятанных запасов.
Пару минут спустя селяне снова спросили: "Это всё?". "Пожалуй, – ответили солдаты, – пару картофелин придадут ему больше густоты". И тогда удалился другой селянин.
В течение последнего часа солдаты перечислили другие ингредиенты, которые могли бы сделать суп ещё вкуснее: говядину, лук-порей, соль, зелень и специи. И всякий раз какой-нибудь другой селянин удалялся, чтобы принести что-нибудь из своих личных запасов.
В итоге солдаты сварили большой котёл горячего, дымящегося супа. Они извлекли из него камни и сели вокруг насладиться сытным обедом, которого ни одному из них уже давно не доводилось отведывать.
Из этой истории о супе из камней следует два поучительных вывода. Солдаты хитро воспользовались любопытством селян, чтобы заполучить у них еду. Но ещё важнее, что солдаты действовали подобно катализатору, объединив селян вместе и тем самым показав им, что не удалось бы сделать каждому из них в отдельности. И это называется синергетическим эффектом, когда в конечном счёте выигрывают все.
Время от времени и вам, может быть, придётся подражать этим солдатам. Ведь вы можете оказаться в такой ситуации, когда точно знаете, что и как нужно делать. Перед вашим мысленным взором вся система, и вы знаете, что с ней всё в порядке. Но стоит вам попросить разрешение взяться за доводку всего в целом, вы встретите препятствия и недоумённые взгляды. Люди сформируют комитеты, бюджеты потребуют утверждения, и всё только усложнится. Каждый будет защищать свои ресурсы, что иногда называется "изначальной апатией". 
И тогда наступит время выставить камни. Тщательно обдумайте, что именно вы можете обоснованно попросить. Разработайте и покажите это в готовом виде другим, чтобы изумить их. И тогда они скажут: "Конечно, было бы лучше, если бы мы это добавили…" Притворитесь, что это неважно. Не вмешивайтесь до тех пор, пока они не начнут просить вас внедрить функциональное средство, которое вам первоначально требовалось. Ведь людям легче присоединиться к уже достигнутому успеху. Приоткройте им перспективы на будущее, и они сплотятся вокруг вас.
Будьте катализатором перемен.

