Pragmaticus — опытный в деле, пригодный для использования
Большинство людей находят перемены трудными – иногда по веским основаниям, а иногда просто по укоренившейся инерции. Поэтому в разделе "Суп из камней и варёные лягушки" рассматривается стратегия побуждающих к действию перемен и (ради равновесия) представлена поучительная история об одном земноводном, пренебрегшем опасностями, скрывающимися в постепенных переменах.
Одно из преимуществ, дающих понимание контекста, в котором вы работаете, заключается в том, что вам просто легче выяснить, насколько качественно разработанное вами программное обеспечение. Иногда близкое к идеальному качество оказывается лишь одним из возможных вариантов, но зачастую приходится идти на компромиссы. Более подробно этот вопрос рассматривается в разделе "Подходящее программное обеспечение".
Безусловно, чтобы всё это осилить, потребуется обширная база знаний, поэтому обучение – это непрерывно продолжающийся процесс. В связи с этим в разделе "Ваш багаж знаний" описываются некоторые стратегии поддержания динамики данного процесса.
Наконец, никто из нас не работает в вакууме. Все мы проводим немало времени, общаясь с другими людьми. Поэтому в разделе "Общайтесь!" перечислены способы, помогающие делать это лучше.
Прагматичное программирование происходит от философии прагматичного мышления. И в этой главе закладывается основание для такой философии.
Это ваша жизнь
"Я в этом мире не для того, чтобы жить то вашим ожиданиям, а вы – не для того, чтобы жить по моим".
								Брюс Ли
Это ваша жизнь, и она принадлежит вам. Вы её ведёте и творите.
Многие разработчики жалуются нам на свою разочарованность. Их проблемы различны. Одни ощущают застой в своей работе, а другие считают, что технический прогресс обошёл их стороной. Они полагают, что их недооценивают, им недоплачивают или в их командах отравляющая атмосфера. Возможно, они хотят переехать в Азию или в Европу, а может быть
работать дома. И в ответ на все эти жалобы мы всегда задаём один и тот же вопрос:"Почему вы не можете это изменить?"
Разработка программного обеспечения должна находится близко к началу любого доступного списка требующихся специальностей. Навыки разработчиков востребованы, их знания распространяются за пределы географических границ, они работают в удалённом режиме, получая за свой труд хорошую плату.
И вообще, они могут делать почти всё, что хотят.
Но по какой-то причине разработчики противятся переменам. Они выжидают, надеясь, что положение дел переменится к лучшему. Они пассивно наблюдают за тем, как их навыки устаревают, жалуясь на то, что их компании ничему их не обучают. Они рассматривают рекламные объявления экзотических стран в городском транспорте, а затем выходят под холодный дождь и бредут на работу. Поэтому ниже приведён самый важный совет в этой книге.
У вас есть свобода выбора. (Ахахахах, из ограниченного числа вариантов.)
Кот съел мой код
Одним из краеугольных камней прагматизма философии является идея взять на себя ответственность за свои действия в отношении продвижения по карьерной лестнице, обучения и образования, выполнения своего проекта и повседневной работы. Программисты-прагматики сами заботятся о своей карьере и не боятся признавать своё невежество или ошибки. Это, конечно, не самая приятная сторона программирования, но она всё же проявляется даже в самых удачных проектах. Порой дело не ладится, несмотря на проведённое тестирование, грамотно составленную документацию и сплошную авторматизацию.  И тогда выпуск программного продукта задерживается в связи с возникшими непредвиденными техническими трудностями. 
Если происходит нечто подобное, мы стараемся обращаться с командой как можно более профессионально. А это означает быть честными и откровенными. Мы можем гордиться своими способностями, но должны признавать и свои недостатки: невежество и ошибки.
Доверие в команде
Прежде всего, ваша команда должна доверять вам и полагаться на вас, а вы – вы спокойно полагаться на каждого из ее членов. Доверие в команде совершенно необходимо для проявления творческой инициативы и сотрудничества, как следует из литературы, в которой исследуется данный вопрос. В здоровом окружении, основанном на доверии, вы можете смело высказывать свои мысли, представлять свои идеи на суд коллег и полагаться на других членов команды так же, как и они на вас. Ведь без доверия…
Представьте, что высокотехнологичная команда ниндзя незаметно проникает в самое логово преступников. После нескольких месяцев тщательного планирования и изнуряющих тренировок вы, наконец-то добрались до места. И теперь, когда настал ваш черёд настроить систему лазерного наведения, вы неожиданно для остальных заявляете:" Извините, ребята, у меня нет с собой лазера. Мой кот играл с красной точкой лазерного целеуказателя, и поэтому я оставил его дома". Нарушенное подобным образом доверие вряд ли удастся восстановить.
Взятие на себя ответственности
Ответственность – это нечто такое, на что вы активно соглашаетесь. В частности, вы берёте на себя обязательство обеспечить правильность выполнения какой-либо работы, но совсем не обязательно имеете непосредственный контроль над каждой стадией данного процесса. Помимо того, что вы стараетесь выполнить свою работу как можно лучше, вам приходится также анализировать ситуацию на наличие неподконтрольных вам рисков. Вы имеете полное право не брать на себя ответственность за непредсказуемую ситуацию или такую, когда риски слишком велики или этические последствия слишком постыдны. И тогда вам придётся принимать решение, исходя из ваших собственных ценностей и суждений.
Если вы все же берёте на себя ответственность за конечный результат, то должны учитывать, что вам придётся нести ответственность за него. И если вы допустите оплошность, как это делаем все мы, или совершите ошибку в суждении, то признайте её честно и постарайтесь предложить другие варианты выхода из затруднительной ситуации.
Не сваливайте вину на кого-то или что-то другое и не ищите оправданий. Не вините во всём трудности у поставщика, язык программирования, руководство или коллег. Любой из этих факторов может сыграть свою отрицательную роль, но именно вы должны найти правильные решения, а не оправдания.
На случай, если существует риск, что поставщик вас подведёт, у вас должен быть план экстренных мероприятий. Если же выйдет из строя устройство памяти, а вместе с ним исчезнет весь исходный код и у вас не окажется его резервной копии, – это будет вашей оплошностью. Оправдание перед начальством вроде "кот съел мой исходный код" просто не пройдёт.
Предлагайте варианты разрешения затруднений, а не оправдания и извинения.
Прежде чем подходить к кому-нибудь и объяснять причины, по которым что-то нельзя сделать, что-то запаздывает или не работает, остановитесь и послушайте себя. Обратитесь к резиновому утёнку или котёнку на своём мониторе, чтобы опробовать на нём, звучат ли ваши оправдания благоразумно или нелепо и как они будут звучать перед вашим начальством.
Воспроизведите весь разговор в уме и подумайте, что, вероятнее всего, ответит другой его участник. Спросит ли он вас, пробовали ли вы сделать вот это или не учли ли вы вот то? Как вы на это ответите? Прежде чем идти к нему чтобы сообщить плохие новости, подумайте, можно ли опробовать что-нибудь ещё? Иногда вы просто знаете, что он вам ответит, так что избавьте его от лишних хлопот.
Вместо оправданий предлагайте свои варианты разрешения затруднений. Не говорите, что чего-то нельзя сделать. Лучше поясните, что можно сделать, чтобы выйти из трудного положения. Некоторый исходный код должен быть удалён? Скажите об этом и объясните важность этого рефакторинга (см. раздел "Тема 40. Рефакторинг" главы 7 "По ходу кодирования").
Требуется ли вам время на прототипирование, чтобы найти наилучший путь продолжить разработку (см. раздел "Тема 13. Прототипы и памятные записки" главы 2 "Прагматичный подход")? Требуется ли вам внедрить более совершенное тестирование (см. разделы "Тема 41. Тестировать, чтобы кодировать" главы? "По ходу кодирования" и "Строгое и непрерывное тестирование" главы 9 "Прагматичные проекты") или его автоматизация, чтобы не повторять тестирование снова вручную?
Вам могут понадобиться дополнительные ресурсы для окончательного решения задачи тестирования, а возможно, придётся уделить больше времени взаимодействию с пользователями. Или же всё дело просто в вас самих, а значит, вам требуется более углублённо  изучить какие-нибудь книги или курсы? Не бойтесь задаваться подобными вопросами или признаваться в том, что вам нужна помощь.
Старайтесь избавиться от слабых оправданий, прежде чем произносить их вслух. Если вы всё же считаете, что должны оправдаться, сделайте это сначала перед своим котом. И если уж ваш Мурзик готов взять всю вину на себя, то…
Другие разделы, связанные с данной темой
        ◦ Тема 49. Прагматичные команды, глава 9 "Прагматичные проекты".
Задачи
        ◦ Как вы отреагируете, если кто-нибудь (например, банковский служащий, автомеханик или чиновник) придёт к вам со слабым оправданием? Какое у вас составится в итоге мнение о них и об их организации?
        ◦ Если вы, так уж вышло, говорите: "Я не знаю" непременно прибавьте: "Но я найду выход". Это отличный способ признать, что вы чего-то ну знаете, но всё же берете на себя ответственность как профессионал.
Программная энтропия
Несмотря на то что разработка программного обеспечения не подвержена большинству физических законов, все мы сильно подвержены воздействию неуклонного роста энтропии. Физический термин энтропия обозначает величину беспорядка в системе. К сожалению, законы термодинамики утверждают, что энтропия во вселенной стремится к максимуму. Если же беспорядок возрастает в программном обеспечении, но такое явление называется деградацией последнего. Некоторые могли бы назвать это явление более оптимистическим термином "технический долг", подразумевающим, что когда-нибудь они погасят этот долг, – хотя этого, скорее всего, не произойдёт. Но как бы ни называлось данное явление, техническим долгом или деградацией, оно может распространяться бесконтрольно.
Имеется немало факторов, способствующих деградации программного обеспечения, и самый важный из них по видимому имеет отношение к психологии или культуре в работе над проектом. Психология может оказаться весьма тонким свойством вашего проекта, даже если вы работаете над ним самостоятельно. Какими бы совершенными ни были составленные планы или участники проекта, он всё равно может быть подвергнут деградации и разрушению в течение всего срока своего действия. Тем не менее существуют и такие проекты, которые успешно противостоят естественной тенденции к беспорядку и ухитряются завершить вполне удачно, несмотря на огромные трудности и постоянные задержки и помехи.
В чём же тогда отличие? В старых кварталах городов одни здания красивы и чисты, тогда как другие выглядят как трухлявые развалины. Исследователи в сфере преступности и упадка городов открыли замечательный пусковой механизм, очень быстро превращающий чистое, нетронутое, нежилое здание в разрушенную и заброшенную трущобу. Это разбитое окно.
Нельзя жить с разбитыми окнами.
Можно, конечно, возразить, что ни у кого нет времени на обследование проекта и его полную очистку от разбитого стекла. В таком случае лучше запланировать установку мусорного контейнера или переезд в соседнее здание. Но в любом случае не позволяйте энтропии одержать верх.
Прежде всего – не навредить
У Энди некогда был баснословно богатый знакомый. Его дом был в идеальном порядке, обставленный дорогим антиквариатом, предметами искусства и т. д.
Однажды гобелен, висевший слишком близко к камину, загорелся. Пожарные быстро прибыли на место, чтобы потушить пожар и спасти дом от разрушительного огня. Но прежде чем затащить свои длинные и грязные шланги в дом, они остановились, чтобы раскатать мат между входной дверью и очагом пожара, поскольку им не хотелось испортить ковёр – в самый разгар пожара.
Возможно, это и весьма крайний пример. Ведь первая обязанность пожарных – погасить огонь, пренебрегая сопутствующим ущербом. Но они трезво оценили ситуацию, будучи уверенными в своей способности справиться с огнём, и действовали аккуратно, чтобы не нанести имуществу лишний ущерб. Именно таким образом следует обращаться и с программным обеспечением, не нанося ему сопутствующий ущерб лишь потому, что оно находится в каком-то критическом состоянии. Ведь и одно разбитое окно – это уже слишком.
Одного разбитого окна (т. е. плохо написанного фрагмента кода, неудачного управленческого решения, с которым команде приходится мириться в течение всего проекта) достаточно , чтобы всё начало приходить в упадок. Если окажется, что вы работаете над проектом с большим количеством разбитых окон, вам очень легко может прийти в голову следующая мысль "Вся остальная часть этого кода написана скверно, и я поступаю точно так  же". И совсем не важно, что до этого момента проект находился в отличном состоянии. В первоначальном эксперименте, на основании которого была выдвинута теория "разбитого окна", заброшенный автомобиль стоял целую неделю. Но однажды в нём было разбито одно окно, после чего автомобиль был обчищен и перевёрнут вверх дном в считанные часы.
Подобным же образом, присоединившись к проекту, где код безупречен (т. е. написав ясно, изящно и грамотно) , вам следует действовать крайне осторожно, чтобы не навредить, как пожарные в упомянутом выше примере. Даже если пожар в самом разгаре (поджимают сроки, приближается дата выпуска, выставочная демонстрация и т. д.), вы не должны стать первым, кто испортит всё дело или нанесёт дополнительный ущерб. Просто скажите себе:"Никаких разбитых окон".
Другие разделы, связанные с данной темой
    • Помогите укреплению команды, обследовав окрестности проекта. Выберите два или три "разбитых окна" и обсудите со своими коллегами возникшие трудности и возможные пути их разрешения.
    • Можете ли вы предсказать, когда разобьётся первое окно? Какова будет ваша реакция? Если это стало следствием чужого решения или приказа начальства, то что вы можете с этим поделать?
Суп из камней или вареные лягушки
Три солдата, возвращавшихся с войны домой, проголодались. Когда они увидели перед собой село, то воспряли духом, поскольку были уверены, что селяне накормят их. Но когда они добрались до села, то обнаружили двери домов запертыми на замок, а окна закрытыми. После многих лет войны селянам не хватало еды, а ту что у них была, они припрятывали.
Невзирая на постигшую их неудачу, солдаты вскипятили котелок воды, аккуратно положили в него три камня. Поражённые селяне вышли посмотреть на происходящее.
"Это суп из камней", – пояснили солдаты. – " И это всё, что вы в него положили?" – спросили селяне. "Абсолютно всё, хотя говорят, что он будет лучше на вкус, если положить в него немного моркови…" Один из селян удалился, тотчас вернувшись с корзиной моркови из своих припрятанных запасов.
Пару минут спустя селяне снова спросили: "Это всё?". "Пожалуй, – ответили солдаты, – пару картофелин придадут ему больше густоты". И тогда удалился другой селянин.
В течение последнего часа солдаты перечислили другие ингредиенты, которые могли бы сделать суп ещё вкуснее: говядину, лук-порей, соль, зелень и специи. И всякий раз какой-нибудь другой селянин удалялся, чтобы принести что-нибудь из своих личных запасов.
В итоге солдаты сварили большой котёл горячего, дымящегося супа. Они извлекли из него камни и сели вокруг насладиться сытным обедом, которого ни одному из них уже давно не доводилось отведывать.
Из этой истории о супе из камней следует два поучительных вывода. Солдаты хитро воспользовались любопытством селян, чтобы заполучить у них еду. Но ещё важнее, что солдаты действовали подобно катализатору, объединив селян вместе и тем самым показав им, что не удалось бы сделать каждому из них в отдельности. И это называется синергетическим эффектом, когда в конечном счёте выигрывают все.
Время от времени и вам, может быть, придётся подражать этим солдатам. Ведь вы можете оказаться в такой ситуации, когда точно знаете, что и как нужно делать. Перед вашим мысленным взором вся система, и вы знаете, что с ней всё в порядке. Но стоит вам попросить разрешение взяться за доводку всего в целом, вы встретите препятствия и недоумённые взгляды. Люди сформируют комитеты, бюджеты потребуют утверждения, и всё только усложнится. Каждый будет защищать свои ресурсы, что иногда называется "изначальной апатией". 
И тогда наступит время выставить камни. Тщательно обдумайте, что именно вы можете обоснованно попросить. Разработайте и покажите это в готовом виде другим, чтобы изумить их. И тогда они скажут: "Конечно, было бы лучше, если бы мы это добавили…" Притворитесь, что это неважно. Не вмешивайтесь до тех пор, пока они не начнут просить вас внедрить функциональное средство, которое вам первоначально требовалось. Ведь людям легче присоединиться к уже достигнутому успеху. Приоткройте им перспективы на будущее, и они сплотятся вокруг вас.
Будьте катализатором перемен.
Со стороны селян
С другой стороны, история о супе из камней повествует о едва заметном и постепенном употребляемом лукавстве, а также о чрезмерной сосредоточенности на чём-то одном. Ведь думая о камнях, селяне забывают обо всём остальном. Все мы попадаем в подобную западню едва ли не каждый день, когда что-нибудь незаметно подкрадывается к нам.
Нам не раз приходилось наблюдать подобные симптомы, когда проекты медленно, на верно выходили из подчинения. Большинство бедствий в программном обеспечении начинается с едва заметных мелочей, и большинство проектов постепенно выходят за установленные пределы. Системы отклоняются от своих спецификаций одно функциональное средство за другим, тогда как одна "зарплата" за другой вставляется во фрагмент кода до тех пор, пока в нём не останется ничего первоначального. Зачастую именно накапливающиеся постепенно мелочи портят нравы и разрушают команды.
Делая это, вам, возможно, будет удобнее придерживаться линии поведения, приписываемой контр-адмиралу д-ру Грейс Хоппер (Grace Hopper), которая говорила: "Легче попросить прощения, чем получить разрешение."
Не забывайте об общей картине
Честно говоря, мы никогда не пробовали этого сами, но знатоки говорят, что если взять лягушку и опустить её в кипящую воду, она тотчас выпрыгнет из неё наружу. Но если погрузить лягушку в кастрюлю с холодной водой, а затем постепенно нагревать её, то лягушка не заметит постепенного повышения температуры и сварится в кастрюле.
Следует, однако, иметь ввиду, что случай с лягушкой отличается от случая с разбитыми окнами, обсуждавшегося ранее в разделе "Тема 3. Программная энтропия". Согласно теории разбитых окон люди теряют всякую охоту бороться с энтропией, поскольку воспринимают её как безразличие всех остальных. А лягушка просто не замечает никаких изменений.
Не уподобляйтесь пресловутой лягушке. Внимательно следите за общей картиной происходящего. Постоянно присматривайте за тем, что происходит вокруг вас, а не только за  тем, что вы делаете сами. 
Другие разделы, связанные с данной темой
    • Тема 1. Это ваша жизнь.
    • Тема 38. Программирование по совпадению, глава 7. "По ходу кодирования".
Задачи
    • Рецензируя рукопись первого издания этой книги, Джон Лакос поднял следующий вопрос:
солдаты сознательно вводят в всё большее заблуждение селян, хотя перемены, которые они ускоряют, идут всем только на пользу. Но если сознательно вводить всё больше в заблуждение лягушку, то можно нанести ей вред. Можете ли вы определить, готовите ли вы суп из камней или лягушек, когда пытаетесь ускорить перемены? Является ли такое решение субъективным или объективным?
    • Быстро ответьте, не глядя на потолок, сколько осветительных приборов висит над вами?
Сколько выходов в помещении, где вы находитесь, и сколько в нём присутствует людей? Есть ли там что-нибудь чужое или выглядящее неуместным? Это упражнение в осведомлённости об окружающей обстановке – метод, практикуемый в разных кругах: от бойскаутов до лётчиков. Выработайте сначала в себе привычку смотреть и замечать всё, что происходит вокруг вас, а затем перенесите её на свой проект.
Достаточно хорошее программное обеспечением
"Для лучшего добро сгубить легко".
У.Шекспир, Король Лир, действие 1, сцена 4
Есть старый анекдот об американской компании, заказавшей 100 тысяч микросхем у японского производителя. В спецификации на микросхемы было, в частности, указано, что брак должен составлять 1 штуку на 10 тысяч хороших микросхем. Заказ был доставлен через несколько недель и состоял из одной крупной коробки, содержавшей тысячи микросхем, и другой, мелкой, в которой было всего лишь десять микросхем. К этой коробке была приклеена этикетка, на которой было написано "Бракованные микросхемы".
Хорошо, если бы и у нас контроль качества был на таком же уровне. Но реальность не позволяет нам производить ничего совершенно идеального, и особенно бездефектного программного обеспечения. Ведь время, технология и темперамент словно сговорились против этого.
Но это и не повод для разочарования. Как описал Эд Юрдон в своей статье When good-enough software is best (Когда достаточно хорошее программное обеспечение оказывается наилучшим) в журнале IEEE Software, [You95], можно приучить себя писать достаточно хорошие программы, которые достаточно хороши для пользователей, будущих сопровождающих их программистов и для спокойствия вашего духа. В этом случае вы работаете более продуктивно, а пользователи ваших программ удовлетворены в большей степени. А кроме того, вы можете обнаружить, что ваши программы только выигрывают от сокращения их инкубационного периода.
Прежде чем продолжить, необходимо пояснить, о чём, собственно здесь идёт речь. Слово "подходящий" совсем не подразумевает небрежно или плохо написанный код. Все системы должны удовлетворять требованиям пользователей, чтобы считаться удачно спроектированными, а также соответствовать основным нормам производительности, конфиденциальность и безопасности. Мы просто ратуем за то, чтобы дать пользователям возможность участвовать в процессе принятия решения о том, когда произведённый программный продукт следует считать достаточно хорошим для удовлетворения их потребностей.
Идите на компромиссы с пользователями
Как правило вы пишите программы для других людей. И даже иногда не забываете выяснить, что же им, собственно, требуется. Но спрашиваете ли вы их вообще, насколько хорошее программное обеспечение они хотят получить? Иногда у них просто нет никакого выбора. Если вы разрабатываете кардиостимулятор, автопилот или низкоуровневую библиотеку, предполагающую широкое распространение, требования будут более строгими, а возможности вашего выбора – ограниченными.
Но если вы работаете над совершенно новым программным продуктом, то а вашу разработку накладываются самые разные ограничения. Так, специалистам по сбыту требуется сдержать свои обещания, конечные пользователи могут составлять планы, исходя из сроков поставки, а ваша компания, как всегда, испытывает дефицит денежных средств. Поэтому было бы непрофессионально пренебрегать требованиями всех этих пользователей, просто дополнив программу новыми функциональными возможностями или "отполировав" исходный код ещё раз. Мы ни в коем случае не сеем панику. Ведь в равной степени непрофессионально обещать невозможные временные рамки выполнения работ и нарушать элементарные правила проектирования, чтобы уложиться в крайний срок. Область действия и качество производимой вами системы должны обсуждаться как часть требований к ней.
Включайте в требования к системе вопрос о её качестве
Нередки случаи, когда приходится идти на разные компромиссы. Как ни странно, но многие пользователи готовы применять не до конца доведённое программное обеспечение сейчас, чем ждать ещё целый год, пока оно не будет доведено до состояния готовой к выпуску полноценной версии. Хотя на самом деле то, что может понадобиться через год, всё равно окажется совершенно другим. И с этим согласятся отделения информационных технологий (ИТ) многих компаний со скромными бюджетами. Хорошее программное обеспечение сегодня зачастую оказывается более предпочтительным, чем совершенное программное обеспечение завтра. Если вы предоставляете что-нибудь пользователям для экспериментирования как можно раньше, их отзывы могут привести к более совершенному окончательному решению (см. раздел "Тема 12. Трассирующие пули" главы 2 "Прагматичный подход").
Знайте меру
В какой-то степени программирование подобно живописи. Вы начинаете с чистого холста и некоторых основных исходных материалов. Используя сочетание науки, искусства и ремесла, вы решаете, что с ними делать. Сначала вы набрасываете общую форму, затем раскрашиваете исходное окружение и, наконец, заполняете детали. При этом вы постоянно отходите назад и критическим взглядом оцениваете то, что уже сделано. А время от времени вы отбрасываете холст и начинаете всё с самого начала. Но художники скажут вам, что все тяжкие труды пойдут прахом, если не вовремя остановиться. Так, если накладывать один слой краски на другой, деталь на деталь, то в краске потеряется сама живопись.
Старайтесь не испортить грамотно написанную программу чрезмерными украшательствами и усовершенствованиями. Просто имейте в виду, что она никогда не будет совершенной. (Подробнее об основных принципах написания кода и несовершенстве этого мира речь пойдёт в разделе "Пока вы программируете" главы 7.)
Другие разделы, связанные с данной темой
    • Тема 45. Западня требований, глава 8 "До начала проекта".
    • Тема 46. Решение неразрешимых головоломок, глава 8 "До начала проекта".
Задачи
    • Просмотрите инструментальные средства и операционные системы, которыми регулярно пользуетесь. Сможете ли вы найти в них признаки того, что их производители и/или разработчики спокойно выпускают программное обеспечение, заранее зная, что оно несовершенно? Как его пользователь вы, скорее всего:
    1. подождёте до тех пор, пока не будут исправлены все программные ошибки;
    2. примите как должное некоторые программные ошибки, учитывая сложность программного обеспечения;
    3. Или же выберете более простое программное обеспечение, но с меньшими дефектами?
    • Рассмотрите влияние модульности на выпуск программного обеспечения. Потребуется ли больше или меньше времени, чтобы получить тесно связанный монолитный программный блок требуемого качества по сравнению с системой, состоящей из очень слабо связанных модулей или микрослужб? Каковы преимущества и недостатки каждого из этих методов проектирования?
    • Можете ли вы сказать о распространённом программном обеспечении, что оно страдает от раздутости функциональных средств, т. е. содержит намного больше функциональных средств, чем вам вообще может потребоваться? Ведь каждое функциональное средство может стать источником программных ошибок и брешей в защите. И чем больше таких средств, тем труднее их находить, когда потребуется ими воспользоваться. Чувствуете ли вы себя в опасности попасть в такую западню?
Ваш багаж знаний
"Инвестиции в знания приносят наибольшие дивиденды".
Бенджамин Франклин
Ох, уж этот старина Бенджамин Франклин – никогда не упустит случай произнести нравоучительную проповедь! Ну как же? Ведь если бы мы рано ложились спать и рано вставали, то разве не стали бы отличными программистами?
Ранней пташке – ранний корм… и что же тогда станет с ранним червячком? Но в данном случае Бенджамин попал не в бровь, а в глаз. Ведь ваши знания и опыт являются ныне самыми важными профессиональными ресурсами.
К сожалению, эти ресурсы исчерпываются. Ваши знания устаревают по мере разработки новых методик, языков и сред. Изменение в расстановке сил на рынке способно сделать ваш опыт устаревшим или неуместным. Принимая во внимание постоянно растущие темпы перемен в технологическом обществе, это может произойти довольно быстро.
По мере убывания ваших знаний убывает и ваша ценность для вашей компании или клиента. И нам хотелось бы воспрепятствовать такой тенденции, вообще искоренив её. Ваши способности учиться чему-то новому как раз и составляют самый важный стратегический ресурс. Но как приобрести способность учиться чему-то новому и как знать, чему именно следует учиться?
Ваш багаж знаний
Мы предпочитаем рассматривать всё, что программисты знают о вычислениях, прикладных областях, в которых они работают, а также весь их опыт как багаж знаний, которыми они обладают. Управление багажом знаний очень похоже на управление финансовым портфелем по описываемым ниже руководящим принципам.
Исчерпывающий ресурс — это нечто такое, чья ценность убывает со временем. К характерным его примерам относится склад, заполненный бананами, а также билет на футбол.
    1. Серьёзные инвесторы по привычке регулярно вкладывают во что-нибудь свои денежные средства.
    2. Ключом к успеху в долгосрочной перспективе является диверсификация.
    3. Смышлёные инвесторы составляют свои портфели, находя определённое равновесие между консервативными и высокодоходными, хотя и слишком рискованными инвестициями.
    4. Инвесторы пытаются приобретать ценные бумаги по малой цене, а продавать их по высокой цене, чтобы получить наибольшую прибыль.
    5. Портфели должны периодически пересматриваться и заново уравновешиваться.
Чтобы быть успешным в своей профессии, необходимо инвестировать в собственный багаж знаний, следуя таким же руководящим принципам, как и описанные выше для финансового портфеля. Правда, управление такого рода инвестициями – это такой же навык, как и любой другой, а следовательно, ему можно научиться. Самое главное – сначала заставить себя, а затем развить в себе привычку делать это. С этой целью выработайте соответствующую процедуру, чтобы следовать ей до тех пор, пока она не укоренится в вашем сознании.
И тогда вы обнаружите, что впитываете новые знания автоматически.
Создание своего багажа знаний
    • Инвестируйте регулярно. Подобно финансовому инвестированию, вы должны не менее регулярно инвестировать в багаж своих знаний, пусть даже и в небольших объёмах. И здесь привычка важна в такой же степени, как и объёмы инвестиций, поэтому зарезервируйте для этой цели время и место, чтобы не отвлекаться ни на что другое. Несколько примерных целей перечислены в следующем разделе.
    • Диверсифицируйте свои инвестиции. Чем более разнообразны ваши знания, тем ценнее вы сами. Вы должны как минимум знать все особенности той технологии, которой пользуетесь в настоящий момент. Но не останавливайтесь на этом. Перемены в вычислительной технике происходят очень быстро, и если какая-нибудь технология весьма востребована сегодня, то завтра она окажется практически бесполезной или, по крайней мере, невостребованной. Чем больше технологий вы освоите, тем легче вам будет приспосабливаться к переменам. И не забывайте все остальные навыки, которые могут вам потребоваться в любой моменте, в том числе и навыки, приобретённые в нетехнических областях знаний.
    • Управляйте риском. Технологии бывают самые разные: от рискованных, но и потенциально высокорентабельных и до малорискованных, но и малорентабельных. Не стоит вкладывать все свои средства ни в высокорискованные акции, которые могут внезапно обесцениться, ни тратить их консервативно, упуская при этом неплохие возможности. Не кладите все яйца в одну корзину, полагаясь на какую-то одну технологию.
    • Покупайте дешево, а продавайте дорого. Освоить появившуюся технологию ещё до того, как она найдёт широкое распространение, пожалуй, так же трудно, как и найти акции, продающиеся по цене существенно ниже рыночной. Но затраченные усилия могут вполне окупиться сторицей. Так, изучать язык Java в то время, когда он только появился и был малоизвестен, было рискованно, но усилия тех, кто принял его сразу, окупились впоследствии сторицей, когда он стал мейнстримом в данной отрасли.
    • Пересматривайте и заново балансируйте багаж своих знаний. Информационная отрасль развивается очень динамично. Новоиспечённая технология, в которую вы начали инвестировать в прошлом месяце, сегодня может оказаться окаменевшим ископаемым. Возможно, вам стоит освежить знания технологий баз данных, которыми вы уже давно не пользовались, а может быть, лучше подумать о новой работе и попытаться изучить другой язык…
Самый первый из всех перечисленных выше руководящих принципов легче всего выполнить, поэтому он ещё раз упоминается ниже.
Регулярно инвестируйте в свой багаж знаний.
Цели
Теперь, когда известны некоторые руководящие принципы управления багажом знаний, необходимо выяснить самый лучший путь для приобретения интеллектуального капитала, который можно инвестировать в этот багаж знаний. Ниже приведён ряд рекомендаций по этому поводу.
    • Каждый год изучайте хотя бы один новый язык. (Чё-бля? Чёооо? Ты чё бля? Бляяааа!) Разные языки позволяют по-разному решать одни и те же задачи. Изучив самые разные подходы к решению задачи, вы расширяете горизонты её осмысления, избегая опасности застрять в тупике. Кроме того, изучение многих языков облегчается благодаря большему разнообразию свободно доступного программного обеспечения.
    • Читайте по одной книге из технической литературы каждый месяц. Не смотря на обилие кратких статей и порой надёжных ответов в Интернете, для углубленного понимания предмета требуются книги с подробным его изложением. Просмотрите среди предложений в книготорговой сети интересную литературу, связанную с вашим текущим проектом. Как только чтение технической литературы войдёт у вас в привычку, читайте ежемесячно по книге. Освоив технологии, которыми вы пользуетесь в настоящий момент, обратитесь к какой-нибудь другой технологии, не связанной с вашим текущим проектом.
    • Читайте и нетехническую литературу. Очень важно не забывать, что компьютерами пользуются люди, потребности которых вы стараетесь удовлетворить. Вы работаете с людьми, вам дают работу другие люди, а некоторые люди даже пытаются незаконно проникнуть в вашу вычислительную систему. Поэтому не забывайте о человеческой стороне вашей профессии, которая требует совершенно иных навыков для межличностного общения ( и хотя мы иронично называем их "лёгкими", на самом деле приобрести их трудно).
    • Посещайте курсы повышения квалификации. Поищите интересные курсы в местном колледже, университете или в Интернете, а возможно, и на очередной выставке или конференции.
    • Участвуйте в местных пользовательских группах или собраниях. Изоляция может оказаться убийственной для вашей карьеры, поэтому познакомьтесь с людьми, работающими за пределами вашей организации. Старайтесь принимать активное участие во встречах по интересам, а не только приходить и слушать.
    • Экспериментируйте с разными средствами. Если раньше вы работали только в Windows, уделите время работе с Linux. Если вы пользовались только сборочными файлами и текстовым редактором, опробуйте логически развитую интегрированную среду разработки с современными функциональными средствами, и наоборот.
    • Оставайтесь в курсе дела. Читайте новости и публикации в Интернете о технологиях, отличающихся от тех, которыми вы пользуетесь в своем текущем проекте. Это отличный способ выяснить, каким опытом их применения обладают другие люди, ознакомиться с применяемой ими конкретной терминологией и т. д.
Очень важно не прерывать инвестирование в багаж своих знаний. Как только вы освоите какой-нибудь новый язык или технологическое новшество, переходите к следующему, чтобы изучить его.
Совершенно не важно, пользуетесь ли вы любой из освоенных вами технологий в своём проекте или просто указываете из при составлении резюме. В процессе обучения вы расширяете горизонты своего мышления, открываете новые возможности и способы сделать что-нибудь конкретное. При обучении большое значение имеет взаимное обогащение идеями. Старайтесь применить усвоенные уроки в своём текущем проекте. И даже если конкретная технология в вашем проекте не применима, то вы всё равно можете позаимствовать из неё какие-нибудь идеи. Так, если вы овладеете принципами объектно-ориентированного программирования, то сможете писать процедурные программы уже иначе. А уяснив парадигму функционального программирования, сможете иначе написать объектно-ориентированный код и т. д.
Возможности для обучения
Итак, вы взахлёб читаете книги, держитесь в курсе самых передовых разработок в вашей области, что совсем не так легко. Когда же кто-то обращается к вам с вопросом и вы не имеете ни малейшего представления, что ему ответить, то открыто признаётесь в этом. Но это не должно вас останавливать. Примите это как личный вызов и найдите ответ. Поспрашивайте у других, поищите ответ в Интернете, причём не только в бытовых, но и в академических кругах.
Если вы не можете найти ответ сами, найдите того, кто способен это сделать. Не оставляйте заданный вам вопрос без ответа. Общение с другими людьми поможет вам создать свой личный круг знакомств, где в ходе расспросов вы можете неожиданно для себя найти ответы и на другие, не связанные с данным вопросы. И при этом багаж ваших прежних знаний станет пополняться новыми…
На всё это чтение и изучение вам, конечно, требуется время, которого и так не хватает, поэтому подобные занятия необходимо планировать заранее. У вас всегда должно быть что-нибудь почитать в те моменты, когда вам нечего делать. Так, временем ожидания приема у доктора, в очереди или в городском транспорте можно выгодно воспользоваться для чтения, поэтому берите всегда с собой электронную книгу. Хотя вы, может быть, предпочитаете по старой привычке мусолить пальцами печатные издания вроде зачитанной до дыр газеты 1973 года о положении в Папуа Новой Гвинее.
Критическое мышление
Наконец, очень важно уметь критически осмыслить то, что вы читаете и слышите. Вам следует позаботится о том, чтобы знания в вашем багаже были точными, непредубеждёнными и не поддающимися влиянию поставщиков или шумихе, поднятой в средствах массовой информации. Берегитесь страстных приверженцев, настаивающих на том, что только их догма даёт правильный ответ – это может быть и неприемлемо для вас, и вашего проекта.
Ни в коем случае не следует недооценивать силу коммерциализации. Если что-то оказывается в первых строчках результатов поиска в Интернете, то это совсем не означает, что оно самое лучшее. Ведь за то, чтобы занять ведущее положение в результатах поиска, могли просто заплатить. И если какая-нибудь книга выставлена на заметное место в книжной лавке, то это совсем не означает, что она хорошая или даже популярная. Ведь издательство могло заплатить за то, чтобы его книгу выставили на видном месте.
Критически анализируйте то, что вы читаете и слышите
Критическое мышление само по себе является отдельной дисциплиной, поэтому мы рекомендуем вам изучать её и читать всё, что только можно найти о ней. Между тем, вы можете начать с нескольких перечисленных ниже вопросов и обдумать их.
    • Пять вопросов "Почему?". Задать хотя бы пять вопросов "Почему?" – излюбленный прём консультантов. Задайте сначала один такой вопрос  и получите ответ. Затем копните глубже, задав ещё один вопрос "Почему?". Повторяйте эту процедуру словно нетерпеливый, но вежливый четырёхлетний ребёнок. Подобным образом вам, возможно, удастся приблизиться к коренной причине.
    • Кому это выгодно? Такой вопрос может показаться циничным, но следование за деньгами – это очень полезный путь для анализа. Выгоды для какого-нибудь другого лица или другой организации могут совпадать или не совпадать с вашими выгодами.
    • Каков контекст? Всё происходит в своём контексте, именно поэтому универсальные решения годятся не на все случаи жизни. Так, если вы читаете статью или книгу, где пропагандируется "норма наилучшей практики", вам уместно задаться следующими вопросами. Наилучшая практика для кого? Каковы предпосылки и последствия в краткосрочной и долгосрочной перспективе?
    • Когда и где это будет действовать? При каких обстоятельствах? Не слишком ли поздно или же слишком рано? Не останавливайтесь на мышлении первого порядка: что произойдёт дальше? Но перейдите далее к мышлению второго порядка: что произойдёт после этого?
    • Почему это вызывает трудности? Есть ли какая-то базовая модель и как она действует?
К сожалению, на этом простые вопросы исчерпываются. Но, пополняя багаж своих знаний и применяя в какой-то степени критический анализ к целой лавине читаемых вами технических статей, вы сможете уяснить и сложные вопросы.
Другие разделы, связанные с данной темой
    • Тема 1. Это ваша жизнь.
    • Тема 22. Технические дневники, глава 3 "Основные инструментальные средства".
Задачи
    • Начните на этой неделе изучение нового языка. Если вы привыкли программировать на одном и том же старом языке, опробуйте Clojure, Elixir, Elm, F#, Go, Haskell, Python, R, ReasonML, Ruby, Rust, Scala, Swift, TypeScript или любой другой язык, который может привлечь ваше внимание или просто понравиться вам.
    • Начните читать новую книгу  (как только дочитаете эту!). Если вы занимаетесь подробной реализацией и кодированием, прочитайте книгу по проектированию и архитектуре программного обеспечения. А если вы занимаетесь высокоуровневым или архитектурным проектированием, то прочитайте книгу по технологиям кодирования.
    • Обсудите какую-нибудь технологию с людьми, не занятыми в вашем текущем проекте или работающими в других организациях. Познакомьтесь с такими людьми в кафетерии вашей организации или на местном собрании приверженцев данной технологии.
Общайтесь!
"Я считаю, что лучше быть проигнорированной вовсе, чем недооценённой".
Мэй Уэст, фильм "Красавица 90-х"(Belle of the Nineties), 1934 г.
Вполне возможно, что мы в состоянии усвоить урок, преподанный мисс Уэст. Ведь дело не только в том, что у вас есть, а в том, как вы это преподнесёте. Имея самые лучшие идеи, самый изящный код или самое прагматичное мышление, вы в конечном счёте окажетесь в полной изоляции, если не сумеете общаться с другими людьми. Хорошая идея без эффективного общения осиротеет.
Как разработчики, мы должны общаться на самых разных уровнях. Мы проводим немало часов на совещаниях, слушая и говоря, общаемся с конечными пользователями, пытаясь уяснить их потребности, пишем код, передающий наши намерения вычислительной машине и документирующий наше мышление для будущих поколений разработчиков, а также пишем предложения и памятные записки, требующие и обосновывающие ресурсы, составляем отчёты о текущем состоянии дел и предлагаем новые. Большую часть своего рабочего дня мы проводим в общении, а следовательно, нам нужно делать это умело. Рассматривайте свой родной язык как очередной язык программирования. Пишите на естественном языке так, как вы пишете код, учитывая принципы DRY и ETC, рассматриваемые в следующей главе, возможности автоматизации и пр.
Родной язык – это просто ещё один язык программирования
В последующих разделах перечислены дополнительные идеи по поводу общения, которые, на наш взгляд, кажутся полезными.
Знайте, с кем вы общаетесь
Общение полноценно лишь в том случае, если вы предаёте собеседнику то, что подразумеваете, а для этого недостаточно просто говорить. Для этого необходимо знать потребности, интересы и способности тех, с кем вы общаетесь. Всем нам не раз приходилось присутствовать на совещаниях, где некоторые разработчики с остекленевшим взглядом слушали длинный монолог вице-президента по сбыту о преимуществах какой-нибудь мудрёной технологии. Это не общение, а просто говорильня, навевающая скуку.
Допустим, вам требуется внести изменения в свою систему дистанционного текущего контроля, чтобы воспользоваться сторонним брокером сообщений для распространения уведомлений о состоянии данной системы. С этой целью вы можете представить данное обновление системы самыми разными способами в зависимости от того, с кем  именно вы общаетесь. Так, конечные пользователи по достоинству оценят такое обновление, поскольку их системы теперь смогут взаимодействовать с другими службами, пользующимися предлагаемым брокером сообщений. Отдел сбыта организации сможет воспользоваться этим фактом, чтобы увеличить объёмы продаж, а руководители отделов разработки и эксплуатации просто обрадуются, поскольку заботы по сопровождению этой части системы лягут на чужие плечи. Наконец, разработчикам будет, возможно, интересно приобрести опыт работы с новыми прикладными интерфейсами и даже попробовать найти брокеру сообщений новые области применения. Сделав соответствующий краткий доклад для каждой из этих групп в отдельности, вы сможете заинтересовать их всех своим продуктом.
Как и во всех остальных формах общения, самое главное здесь – обратная связь. Следует не просто ждать вопросов, а попросить их задавать. Обращайте внимание на движения тел и выражения лиц тех, кто вас слушает. Одна из исходных предпосылок в нейролингвистическом программировании гласит: значение вашего общения состоит из реакции, которую вы получаете. Постоянно совершенствуйте свои знания тех, с кем общаетесь
Знайте что вам требуется сказать
Едва ли не самой трудной частью более  формальных стилей общения, применяемых в деловой сфере, является умение подобрать именно те слова, которые требуется сказать. Писатели нередко составляют планы своих книг, прежде чем приступить к их написанию, а составители технической документации просто садятся за клавиатуру, набирают, например, приведённый ниже заголовок, а затем всё, что следует после него.
1. Введение
Планируйте то, что хотите сказать. Сделайте сначала набросок своей речи, а затем спросите себя: "Передаёт ли эта речь тем, кто меня слушает, то, что я хочу выразить, именно так, как им было бы полезно?" Уточняйте свою речь до тех пор, пока не достигнете желанной цели.
Такой подход пригоден не только для составления речей и документов. Когда вы встречаетесь с главным заказчиком на важном совещании или дискуссии, набросайте те идеи, которые хотите донести до него, и запланируйте пару стратегий ясного их изложения. Теперь, когда вы знаете, что именно вам требуется сообщить слушателям, останется лишь правильно подать всё это.
Выбирайте удобный момент
Представьте, что сейчас конец рабочего дня в пятницу недели, когда проходила аудиторская
