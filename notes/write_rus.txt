Выбирайте удобный момент.

Представьте, что сейчас конец рабочего дня в пятницу недели, когда проходила аудиторская проверка. Младший ребёнок вашей начальницы попал в больницу, на дворе льёт как из ведра, а дорога за город домой сулит превратиться в сущуий кошмар. Это, вероятно, не самый подходящий момент попросить у начальницы разрешение увеличить оперативную память на вашем компьютере.

Чтобы понять, что именно готовы услышать те, с кем вы общаетесь, необходимо, в частности, выяснить их приоритеты. Поймайте своего руководителя сразу после нелёгкого разговора с высшим начальством по поводу утери некоторой чати исходного кода, и вы не найдёте более восприимчивого слушателя к вашим идеям относительно хранилищ исходного кода. Старайтесь высказывать свои идеи в подходящий момент, облекая их в удобную для восприятия форму. Иногда для этого достаточно спросить: "Удобно ли сейчас поговорить о...?"

Выбирайте стиль общения

Подбирайте стиль донесения своих мыслей под тех, кому вы их адресуете. Одним
требуется формальное краткое сообщение "самих только фактов", а другим --
длинная, обширная дискуссия, прежде чем перейти к делу. Поэтому необходимо знать уровень их квалификации и опыта в данной области, т.е. являются ли они
знатоками или новичками. Требуется ли им подробная сопроводительная записка
или же краткое изложение самой сути в сообщении по электронной почте? Если
сомневаетесь, спрашивайте.

Но не забывайте, что вы – лишь половина двухстороннего общения. Если кто-нибудь скажет вам, что ему требуется лишь абзац с кратким описанием вашего предложения, а вы не видите способа изложить его короче, чем на нескольких страницах, скажите об этом откровенно. Не забывайте о том, что ответная реакция, какой бы она не была, также является формой общения.

Подавайте свои идеи в привлекательной форме

Ваши идеи, безусловно, важны и поэтому заслуживают того, чтобы сообщить их в привлекательной форме. Составляя письменные документы, слишком многие разработчики (или их руководители) сосредотачивают основное внимание только на их содержании. Мы считаем это ошибкой. Любой повар (или менеджер сети ресторанов) скажет вам, что вы можете часами работать как каторжный на кухне лишь для того, чтобы кто-то испортил все ваши труды плохой подачей блюда.
    Ныне оформлению малопривлекательных документов нет оправдания - современное программное обеспечение способно на поразительные результаты подготовки документов, будь они созданы с использованием языка разметки или в текстовом редакторе. Для этого достаточно выучить всего лишь несколько команд. Так, если вы пользуетесь текстовым редактором, подберите подходящие таблицы стилей и шаблоны. (Вполне возможно, что они уже определены в вашей организации, а следовательно, вы можете воспользоваться уже готовыми шаблонами.) Научитесь оформлять верхние и нижние колонтитулы страниц. Чтобы получить представление о стилях оформления и компоновке документов, обратитесь к образцам, входящим в состав пакета текстового редактора. Выполните проверку орфографии сначала автоматически, а затем вручную. Ведь в тексте могут быть ошибки, которые не удастся уловить средству проверки – человеку свойственно ошибаться.

Привлекайте тех, с кем общаетесь

    Нередко оказывается, что составляемые вами документы в конечном счёте оказываются менее важными, чем сам процесс их подготовки. Поэтому привлекайте по возможности тех, кому эти документы адресованы, уже на ранних стадиях их составления в черновом варианте. Получите их отзывы и воспользуйтесь их советами. Таким образом вы наладите хорошие рабочие отношения и при этом сможете улучшить свой документ.

Учитесь слушать

    Если хотите, чтобы вас услышали другие, научитесь слушать их. Даже в том случае, если вы полностью информированны, и даже тогда, когда стоите на формальном совещании перед двадцатью руководителями, они не услышат вас, если вы не слышите их.
    Пригласите людей к дискуссии, задавая вопросы, или же попросите их сформулировать обсуждаемую тему своими словами. Превратите совещание в диалог, и тогда вы сможете донести свою точку зрения более чётко и эффективно. Кто знает, может быть, вы чему-то в итоге научитесь.

Отвечайте людям

    Если вы задаёте кому-нибудь вопрос и человек вам не отвечает - вам кажется, что он невежлив. Но как часто вы сами не отвечаете людям, когда они присылали вам сообщения по электронной почте или памятную записку, прося сообщить какую-нибудь информацию или предпринять некоторое действие?
С суматохе повседневной жизни очень легко об этом забыть. Поэтому старайтесь всегда отвечать на сообщения по электронной почте, даже если это будет простая фраза:"Я отвечу вам позже". Если держать людей в курсе, они будут готовы простить вам случайные оплошности, чувствуя, что вы о них не забыли.

Важно не только то, что вы говорите, но и как вы это говорите

Вы должны непременно общаться, если только не работаете в полной изоляции. Чем эффекитвнее будет ваше общение, тем больше станет ваше влияние.

Документация

    Наконец, осталось рассмотреть вопрос об общении через документацию. Как правило, разработчики мало задумываются о документации. В лучшем случае они считают её досадной необходимостью, а в худшем - низкоприоритетной задачей, надеясь, что начальство забудет о ней под конец проекта.
    Программисты-прагматики воспринимают документацию как неотъемлемую часть общего процесса разработки. Составление документации можно упростить, не дублируя услиля, не тратя зря время и держа документацию под рукой и, в частности, непосредственно в исходном коде. На самом деле к документации можно применить всё те же прагматические принципы, что и к исходному коду.

Создавая документацию, не фиксируйте её навечно

Качественную документацию можно получить из комментарием в исходном коде, и поэтому модули и экспортируемые функции рекомендуется снабжать комментариями, чтобы облегчить участь других разработчиков, когда им придётся пользоваться этими программными компонентами. Но это совсем не означает, что мы согласны с теми, кто говорит, что каждую функцию, структуру данных, объявление типа данных и т.д. следует непременно снабдить комментариями. Такой механичный подход к составлению комментариев на самом деле усложняет сопровождение кода, поскольку при внесении изменений обновлять приходится не только исходный код, но и документацию. В связи с этим рекомендуется ограничить комментирование исходного кода, не относящегося к прикладному интерфейсу API, указанием причин, назначения и целей написания кода. Ведь сам исходный код уже ясно показывает, как он написан, а следовательно, комментировать его излишне, поскольку это нарушает принцип "не повторяться"(DRY)
    Комментирование исходного кода даёт идеальную возможность задокументировать те трудноуловимые особенности проекта, которые нельзя задокументировать где-нибудь ещё: инженерные компромиссы, причины принятия конкретных решений и отвержения альтернативных решений и т.д.

Крткие итоги

* Выбирайте стиль общения.
* Подавайте свои идеи в привлекательной форме.
* Привлекайте тех, с кем общаетесь.
* Учитесь слушать.
* Отвечайте людям.
* Храните исходный код и документацию вместе.

Другие разделы, связанные с данной темой

* Тема 15. Оценивание, глава 2 "Прагматичный подход".
* Тема 18. Эффективное редактирование, глава 3 "Основные инструментальные средства".
* Тема 45. Западня требований, глава 8 "До начала проекта".
* Тема 49. Прагматичные команды, глава 9 "Прагматичные проекты".

Задачи

* Имеется несколько хороших книг, в которых описывается общение в командах разработчиков, в том числе следующие:
- The Mythical Man-Month: Essays on Software Engineering [Bro96].
- Peopleware: Productive Projects and Teams [DL13].

* Постарайтесь прочитать эти книги в ближайшие 18 месяцев. Кроме того, обратите внимание на книгу Dinosaur Brains: Dealing with All Those Impossible People at Work [BR89], в которой обсуждается эмоциональный багаж, с которым все мы приходим в новую рабочую среду.

* Когда будете в следующий раз делать презентацию или писать памятную записку, чтобы донести свою точку зрения, постарайтесь проработать советы из этого раздела, прежде чем приступить к делу. Ясно определите круг тех лиц, с которыми вам предстоит общаться. Пообщайтесь с ними, если это возможно, впоследствии, чтобы выяснить, насколько точно вы оценили их потребности.

Общение в оперативном режиме.

Всё, что упоминалось выше об общении в письменной форме, в равной степени прменимо и к общению по электронной почте, в социальных сетях, блогах и т.д.
В частности, возможности электронной почты развились до такой степени, что она стала оплотом корпоративной связи, применяется для обсуждения контрактов, организации диспутов и даже служит в качестве свидетельств в суде. Но по какой-то причине люди, никогда не посылавшие ни жалкого листка документации по обычной почте, с удовольствием рассылают электронной почтой скверного вида неуместные сообщения по всему миру.
Наши рекомендации по общению в оперативном режиме довольно просты и перечислены ниже.
* Тщательно выверяйте написанное, прежде чем щёлкнуть по кнопке ОТПРАВИТЬ.
* Выполняйте орфографическую проверку, чтобы обнаружить оплошности автоматической корректуры.
* Придерживайтесь простого и понятного формата.
* Старайтесь как можно меньше цитировать исходное сообщение при ответе. Никому не нравится получать обратно своё сообщение по электронной почте с присоединением к нему единственного слова "Согласен".
* Если цитируете чужое сообщение в электронной почте, укажите его автора и процитируйте его в теле своего сообщения, а не в виде вложения. Это же относится и к общению в социальных сетях.
* Избегайте перепалок или троллинга, если не хотите преследований, которые непременно последуют за таким поведением. Если не решаетесь высказать кому-нибудь в лицо всё, что о нём думаете, - не делайте этого и в сети.
* Проверяйте список получателей ваших сообщений, прежде чем отправлять их. Уже стало едва ли не нормой критиковать начальство по электронной почте, не замечая, что оно присутствует в качестве получателя сообщения в списке рассылки. А ещё лучше - отказаться от критики начальства по электронной почте.
Как считает бесчисленное множество организаций и политиков, электронная почта и социальные сети - это уже навсегда. Поэтому постарайтесь уделить электронной почте столько же внимания, сколько и любой другой памятной записке или отчёту.

Глава 2

Прагматичный подход.

Имеются определённые рекомендации и приёмы, применяемые на всех уровнях разработки программного обеспечения, совершенно универсальные процессы и почти аксиоматические идеи. Но такие подходы редко документируются, а вместо этого они зачастую обнаруживаются в виде отрывочных записей дискуссий о проектировании, управлении проектом или программировании. Но ради вашего удобства мы постараемся здесь собрать все эти идеи и процессы вместе.
Первая и, может быть, самая важная тема касается самой сути разработки программного обеспечения и раскрывается в разделе "Сущность качественного проектирования". Из неё следует всё остальное. Далее следуют разделы "DRY" - пороки дублирования" и "Ортогональность" в которых раскрываются две тесно связанные темы. В первом из них содержится предупреждение не дублировать знания по системам, а во втором - не раздедять никакие фрагменты знаний по многим компонентам системы.
    По мере увеличения темпов изменений становится всё труднее и труднее сохранять приложения в должном состоянии. Поэтому в раздле "Обратимость" мы рассмотрим некоторые методики, помогающие ограждать проекты от их изменяющей среды.
    Два последующих раздела также взаимосвязаны. Так, в разделе "Трассирующие пули" речь пойдёт о стиле разработки, позволяющем одновременно собирать требования, проверять проектные решения и реализовывать код. И это единственный способ идти в ногу с современной жизнью. А в разделе "Прототипы и памятные записки" будет показано, каким образом прототипирование приеняется для проверки архитектур, алгоритмов, интерфейсов и идей. В современном мире крайне важно проверять идеи и получать ответную реакцию, прежде чем безоговорочно принимать их.
    По мере созревания вычислительной техники разработчики во всё большем количестве создают языки высокого уровня. И хотя ещё не изобретён компилятор, способный принимать команду "сделай это вот так", в разделе "Предметно-ориентированные языки" представлены более скромные рекомендации, которые вы можете реализовать самостоятельно.
    Наконец, все мы работаем в условиях ограниченного времени и ресурсов. Нехватку таких ресурсов можно перенести легче ( и принести большее удовлетворение начальству или клиентам), если постараться выяснить, как долго они будут затребованы. Именно об этом и пойдёт речь в разделе "Оценивание". Упомянутые выше принципы сдедует непременно иметь в виду во время разработки, чтобы писать более совершенный, быстродействующий и устойчивый код. Вы можете даже сделать его более удобочитаемым.

Сущность качественного проектирования.

В мире полно умников и знатоков проектирования программного обеспечения, жаждущих передать свою мудрость, приобретённую тяжкими трудами. Для этого существуют особые сокращения, списки (почему-то обычно из пяти пунктов), шаблоны, диаграммы, видеоматериалы, беседы, а возможно, и увлекательные сериалы (Интернет есть Интернет), поясняющие закон Деметры с помощью интерпретирующего танца.
    И мы, авторы этой книги, грешим этим. Но нам хотелось бы внести поправки в пояснение того, что лишь стало для нас очевидным. Прежде всего сделаем заявление общего характера.

Удачное проектное решение легче изменить, чем неудачное.

Вещь считается удачно спроектированной, если она приспосабливается к тем, кто ею пользуется. Для кода это означает, что он должен приспосабливаться к изменениям. Поэтому мы верим в принципе легкости изменения (Easier to Change - ETC). Вот и всё.
    Насколько мы можем судить, всякий принцип проектирования является частным случаем принципа ETC.
