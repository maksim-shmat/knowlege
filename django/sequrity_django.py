""" for sequrity """

Где Django может не помочь
Django может предотвратить 80 процентов XSS-атак за счет автоматического экранирования в
шаблоны. Для остальных сценариев вы должны позаботиться о том, чтобы
следующие задачи:
Цитируйте все атрибуты HTML, например, замените <a
href = {{link}}>
с участием
<a href="{{link}}">
Избегайте динамических данных в CSS или JavaScript с помощью пользовательских методов
Проверяйте все URL-адреса, особенно в отношении небезопасных протоколов, таких как
JavaScript
Избегайте XSS на стороне клиента (также известного как XSS на основе DOM)

В качестве общего правила против XSS я предлагаю фильтровать ввод и выходить при
выход. Убедитесь, что вы строго проверяете и очищаете (фильтруете) любые данные, которые
входит и преобразует (экранирует) его непосредственно перед отправкой пользователю
- в частности, если вам нужно поддерживать ввод пользователя с форматированием HTML.
например, комментарии, рассмотрите возможность использования вместо этого Markdown.
Фильтр на входе и выход на выходе.

Злоумышленник может ввести имя файла как manage.py; rm -rf * и удалите все
файлы в вашем каталоге. Как правило, использовать os.system не рекомендуется. В
модуль subprocess - более безопасная альтернатива (или, что еще лучше, вы можете использовать
os.stat (), чтобы получить атрибуты файла).
Поскольку оболочка интерпретирует аргументы командной строки и среду
переменные, установка в них вредоносных значений может позволить злоумышленнику выполнить
произвольные системные команды.

Не доверяйте данным из браузера, API или любых внешних источников: это
это фундаментальное правило. Убедитесь, что вы проверяете и дезинфицируете любые
внешние данные.
Не храните SECRET_KEY в системе управления версиями: рекомендуется
выберите SECRET_KEY из окружения. Проверьте django-окружающая среда
пакет.
Не храните пароли в виде обычного текста: сохраните пароль приложения
вместо хешей. Также добавьте случайную соль.
Не регистрировать конфиденциальные данные: отфильтруйте конфиденциальные данные, например
данные кредитной карты или ключи API, прежде чем записывать их в файлы журнала.
Любая безопасная транзакция или вход в систему должны использовать SSL: имейте в виду, что
перехватчики в той же сети, в которой вы могли слушать вашу сеть
трафик, если он не в HTTPS. В идеале вы должны использовать HTTPS для
весь сайт.
Избегайте использования перенаправления на URL-адреса, указанные пользователем: если у вас есть перенаправления
например http://example.com/r?url=http://evil.com, то всегда проверяйте
домены из белого списка.
Проверять авторизацию даже для авторизованных пользователей: до
Проверьте, есть ли какие-либо изменения с побочными эффектами, проверьте, вошли ли в систему
пользователю разрешено выполнять это.
Используйте самые строгие регулярные выражения: будь то ваш URLconf или
валидаторов форм, вы должны избегать ленивых и общих регулярных выражений.
Не храните код Python в корневом веб-каталоге: это может привести к
случайная утечка исходного кода, если он отображается в виде обычного текста.
Используйте шаблоны Django вместо создания строк вручную:
У шаблонов есть защита от XSS атак

Используйте Django ORM вместо команд SQL: ORM предлагает
защита от SQL-инъекций.
Используйте формы Django с вводом POST для любого действия со стороной
эффекты: использование форм для простого голосования может показаться излишним.
кнопку, но сделайте это.
CSRF следует включить и использовать: будьте очень осторожны, если вы
исключение определенных представлений с помощью декоратора @csrf_exempt.
Убедитесь, что Django и все пакеты являются последними версиями: Plan
для обновлений. Им может потребоваться внести некоторые изменения в ваш источник
код. Однако они также содержат блестящие новые функции и исправления безопасности.
Ограничение размера и типа загружаемых пользователем файлов: разрешение больших файлов
загрузки могут вызвать атаки типа «отказ в обслуживании». Запретить загрузку
исполняемые файлы или скрипты.
Составьте план резервного копирования и восстановления: благодаря Мерфи вы можете
на случай неизбежного нападения, катастрофы или любого другого простоя.
Убедитесь, что вы часто делаете резервные копии, чтобы минимизировать потерю данных.
